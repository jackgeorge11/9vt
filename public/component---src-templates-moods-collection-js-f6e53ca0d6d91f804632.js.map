{"version":3,"file":"component---src-templates-moods-collection-js-f6e53ca0d6d91f804632.js","mappings":"gPAqCMA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,wBAAMC,UAAU,QAAQD,IACjDE,EAAO,SAAC,GAAD,IAAGF,EAAH,EAAGA,SAAH,OAAkB,qBAAGC,UAAU,gBAAgBD,IAEtDG,EAAU,CACdC,YAAU,OACPC,EAAAA,GAAAA,MAAa,SAACC,GAAD,OAAU,gBAACP,EAAD,KAAOO,IADvB,GAGVC,YAAU,OACPC,EAAAA,GAAAA,WAAmB,SAACC,EAAMT,GAAP,OAAoB,gBAACE,EAAD,KAAOF,IADvC,EAEPQ,EAAAA,GAAAA,gBAAwB,SAACC,GACxB,OACE,gCACE,4CACA,2BACE,4BAAOC,KAAKC,UAAUF,EAAM,KAAM,OAPlC,IAeG,SAASG,EAAT,GAkBb,IAAMC,EAlB0C,EAARC,KAkBhBC,6BAA6BC,MAAM,GACrDC,EAlBN,SAAiBC,GAIf,IAHA,IACEC,EADEC,EAAeF,EAAMG,OAGD,IAAjBD,GAAoB,CACzBD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,IAFyB,MAImB,CAC1CF,EAAMC,GACND,EAAME,IAFPF,EAAME,GAJkB,KAIHF,EAAMC,GAJH,KAU3B,OAAOD,EAIWO,CAAQZ,EAAWa,OAEvC,OACE,gBAAC,IAAD,CACEC,KAAK,YACLC,MAAK,YAAcf,EAAWe,MAC9BC,YAAgBhB,EAAWiB,OAAhB,iCAAuDjB,EAAWkB,YAAlE,KAEX,gBAAC,IAAD,CACE9B,UAAU,kBACV+B,OAAQ,CACN,CAAEJ,MAAO,YAAaK,KAAM,cAC5B,CAAEL,MAAO,QAASK,KAAK,oBAAqBpB,EAAWoB,MACvD,CACEL,MAAOf,EAAWiB,OAClBG,KAAK,oBAAqBpB,EAAWoB,QAIzC,uBAAKhC,UAAU,eACb,sBAAIA,UAAU,gBAAd,SACA,sBAAIA,UAAU,2BAAd,MAA4CY,EAAWiB,QACtDjB,EAAWgB,cACVK,EAAAA,EAAAA,GAAerB,EAAWgB,YAAa1B,GACxCU,EAAWsB,WACV,sBAAIlC,UAAU,WAAd,uCAEF,sBAAIA,UAAU,kBAAd,oBAEDgB,EAAYmB,KAAI,SAACC,GAChB,OACE,uBAAKpC,UAAU,QACb,gBAAC,EAAAqC,KAAD,CACErC,UAAU,QACVsC,GAAE,0BAA4BF,EAAKJ,MAEnC,gBAAC,EAAAO,EAAD,CACEC,OAAOC,EAAAA,EAAAA,GAASL,EAAKM,OACrBC,IAAKP,EAAKT,MACViB,UAAU,UACVC,MAAO,CAAEC,UAAW,WAGxB,uBAAK9C,UAAU,QACb,0BACE,gBAAC,EAAAqC,KAAD,CACErC,UAAU,QACVsC,GAAE,0BAA4BF,EAAKJ,MAElCI,EAAKT,QAGTS,EAAKW,QAAU,sBAAI/C,UAAU,WAAd","sources":["webpack://9vtbackslash5/./src/templates/MoodsCollection.js"],"sourcesContent":["import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport Layout from \"../components/Layout\";\nimport Window from \"../components/Window\";\nimport { renderRichText } from \"gatsby-source-contentful/rich-text\";\nimport { BLOCKS, MARKS } from \"@contentful/rich-text-types\";\n\nexport const query = graphql`\n  query ($slug: String!) {\n    allContentfulMoodsCollection(filter: { slug: { eq: $slug } }) {\n      nodes {\n        artist\n        releaseDate(formatString: \"MMMM YYYY\")\n        description {\n          raw\n        }\n        slug\n        saleEnded\n        moods {\n          isSold\n          price\n          slug\n          title\n          photo {\n            gatsbyImageData(\n              layout: FIXED\n              height: 300\n              placeholder: DOMINANT_COLOR\n            )\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Bold = ({ children }) => <span className=\"bold\">{children}</span>;\nconst Text = ({ children }) => <p className=\"align-center\">{children}</p>;\n\nconst options = {\n  renderMark: {\n    [MARKS.BOLD]: (text) => <Bold>{text}</Bold>,\n  },\n  renderNode: {\n    [BLOCKS.PARAGRAPH]: (node, children) => <Text>{children}</Text>,\n    [BLOCKS.EMBEDDED_ASSET]: (node) => {\n      return (\n        <>\n          <h2>Embedded Asset</h2>\n          <pre>\n            <code>{JSON.stringify(node, null, 2)}</code>\n          </pre>\n        </>\n      );\n    },\n  },\n};\n\nexport default function MoodsCollection({ data }) {\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n\n  const collection = data.allContentfulMoodsCollection.nodes[0];\n  const randomMoods = shuffle(collection.moods);\n\n  return (\n    <Layout\n      page=\"catalogue\"\n      title={`Moods by ${collection.title}`}\n      description={`${collection.artist}'s Moods collection. Released ${collection.releaseDate}.`}\n    >\n      <Window\n        className=\"large catalogue\"\n        crumbs={[\n          { title: \"catalogue\", slug: \"/catalogue\" },\n          { title: \"Moods\", slug: `/catalogue/moods/${collection.slug}` },\n          {\n            title: collection.artist,\n            slug: `/catalogue/moods/${collection.slug}`,\n          },\n        ]}\n      >\n        <div className=\"description\">\n          <h1 className=\"title italic\">Moods</h1>\n          <h2 className=\"--muted ta-right author\">by {collection.artist}</h2>\n          {collection.description &&\n            renderRichText(collection.description, options)}\n          {collection.saleEnded && (\n            <h2 className=\"--muted\">sale has ended for this collection.</h2>\n          )}\n          <h2 className=\"--muted scroll\">(scroll -->)</h2>\n        </div>\n        {randomMoods.map((mood) => {\n          return (\n            <div className=\"idea\">\n              <Link\n                className=\"cover\"\n                to={`/catalogue/moods/cottu/${mood.slug}`}\n              >\n                <GatsbyImage\n                  image={getImage(mood.photo)}\n                  alt={mood.title}\n                  objectFit=\"contain\"\n                  style={{ maxHeight: \"100%\" }}\n                />\n              </Link>\n              <div className=\"info\">\n                <h1>\n                  <Link\n                    className=\"cover\"\n                    to={`/catalogue/moods/cottu/${mood.slug}`}\n                  >\n                    {mood.title}\n                  </Link>\n                </h1>\n                {mood.isSold && <h2 className=\"--muted\">(sold)</h2>}\n              </div>\n            </div>\n          );\n        })}\n      </Window>\n    </Layout>\n  );\n}\n"],"names":["Bold","children","className","Text","options","renderMark","MARKS","text","renderNode","BLOCKS","node","JSON","stringify","MoodsCollection","collection","data","allContentfulMoodsCollection","nodes","randomMoods","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","moods","page","title","description","artist","releaseDate","crumbs","slug","renderRichText","saleEnded","map","mood","Link","to","G","image","getImage","photo","alt","objectFit","style","maxHeight","isSold"],"sourceRoot":""}